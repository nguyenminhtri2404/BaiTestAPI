// <auto-generated />
using System;
using API_TEST.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_TEST.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20240829102726_DB_Init")]
    partial class DB_Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API_TEST.Data.Format", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FormatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("API_TEST.Data.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("API_TEST.Data.PlaybackSchedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("RecordingID")
                        .HasColumnType("int");

                    b.Property<string>("RepeatDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RepeatEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RepeatStart")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("RecordingID");

                    b.ToTable("PlaybackSchedules");
                });

            modelBuilder.Entity("API_TEST.Data.Recording", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Composer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("FormatID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("GenreID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FormatID");

                    b.HasIndex("GenreID");

                    b.ToTable("Recordings");
                });

            modelBuilder.Entity("API_TEST.Data.PlaybackSchedule", b =>
                {
                    b.HasOne("API_TEST.Data.Recording", "Recording")
                        .WithMany("PlaybackSchedules")
                        .HasForeignKey("RecordingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recording");
                });

            modelBuilder.Entity("API_TEST.Data.Recording", b =>
                {
                    b.HasOne("API_TEST.Data.Format", "Format")
                        .WithMany("Recordings")
                        .HasForeignKey("FormatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TEST.Data.Genre", "Genre")
                        .WithMany("Recordings")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Format");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("API_TEST.Data.Format", b =>
                {
                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("API_TEST.Data.Genre", b =>
                {
                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("API_TEST.Data.Recording", b =>
                {
                    b.Navigation("PlaybackSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
